

CREATE OR REPLACE FUNCTION atualizar_num_funcionarios()
RETURNS TRIGGER AS $$
BEGIN
    -- Atualiza o número de funcionários ao inserir ou remover funcionários
    UPDATE DEPARTAMENTO
    SET NUM_FUNCIONARIO = (
        SELECT COUNT(*) FROM FUNCIONARIO WHERE NOME_DEPARTAMENTO = NEW.NOME_DEPARTAMENTO
    )
    WHERE NOME = NEW.NOME_DEPARTAMENTO;
    
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Criar Trigger para INSERT
CREATE TRIGGER trigger_insere_funcionario
AFTER INSERT ON FUNCIONARIO
FOR EACH ROW
EXECUTE FUNCTION atualizar_num_funcionarios();

-- Criar Trigger para DELETE
CREATE TRIGGER trigger_remove_funcionario
AFTER DELETE ON FUNCIONARIO
FOR EACH ROW
EXECUTE FUNCTION atualizar_num_funcionarios();


CREATE OR REPLACE FUNCTION atualizar_idade() RETURNS TRIGGER AS $$
BEGIN
    NEW.IDADE := EXTRACT(YEAR FROM AGE(NEW.DATA_NASCIMENTO));
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trigger_atualizar_idade
BEFORE INSERT OR UPDATE ON FUNCIONARIO
FOR EACH ROW
EXECUTE FUNCTION atualizar_idade();

CREATE VIEW VIEW_NUM_MODELO AS
SELECT NOME_MODELO, COUNT(*) AS NUM_MODELO
FROM CELULAR
GROUP BY NOME_MODELO;

CREATE VIEW VIEW_SUPORTE AS
SELECT IDFUNCIONARIO FROM FUNCIONARIO WHERE AREA_ATUACAO = 'SUPORTE';

CREATE VIEW VIEW_VENDEDOR AS
SELECT IDFUNCIONARIO FROM FUNCIONARIO WHERE AREA_ATUACAO = 'VENDEDOR';

